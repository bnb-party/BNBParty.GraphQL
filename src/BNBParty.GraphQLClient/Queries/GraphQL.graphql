"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on FIELD_DEFINITION | OBJECT

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION | OBJECT

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on FIELD_DEFINITION | OBJECT

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on FIELD_DEFINITION | OBJECT

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on FIELD_DEFINITION | OBJECT

"""
Tells the service which subscriptions will be published to when this mutation is called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

type Comment {
  commentId: Int!
  content: String!
  createdAt: String!
  icon: String
  likeCounter: Int!
  tokenId: Int!
  userAddress: String!
}

type Comments {
  commentsCount: Int!
  items: [Comment!]
}

interface IUser {
  Discord: String
  Telegram: String
  X: String
  aboutMe: String
  address: String!
  avatarUrl: String
  userName: String!
}

"""Long type"""
scalar Long

type Mutation {
  addComment(content: String!, icon: String, tokenId: Int!): Comment!
  deleteAuth(sign: String!): Boolean!
  generateAuth(message: String!, sign: String!): String!
  insertToken(chainID: Long!, txHash: String!): NewToken!
  likeComment(commentId: Int!, tokenId: Int!): Comment!
  likeToken(tokenId: Int!): Token!
  myFollowOn(address: String!, follow: Boolean!): UserWithFollowersAndFollowings!
  updateMyData(userData: UserDataInput!): UserWithFollowersAndFollowings!
  updateTokenContent(offChainData: OffChainDataInput!, tokenId: Int!): Token!
}

type NewToken {
  isNew: Boolean!
  tokenId: Int!
}

type OffChainData {
  Discord: String
  Telegram: String
  Website: String
  X: String
  content: String
  icon: String
  likeCounter: Int!
}

input OffChainDataInput {
  Discord: String
  Telegram: String
  Website: String
  X: String
  content: String
  icon: String
}

type Query {
  countTokens: Int!
  getCoinsCreated(address: String!, chainId: Long!): [Token!]!
  getComment(limit: Int!, page: Int!, tokenId: Int!): Comments!
  getReplies(address: String!): [Comment!]!
  getToken(tokenId: Int!): Token
  getTokenByTokenAddress(chainId: Long!, tokenAddress: String!): Token
  getTokenHolders(chainId: Long!, tokenAddress: String!): [UserBalance!]
  getUserData(address: String!): UserWithFollowersAndFollowings!
  listMyTokens(chainId: Long!, limit: Int!, page: Int!): [Token!]
  listTokensByDate(chainId: Long!, limit: Int!, page: Int!): [Token!]!
  listTokensByLike(chainId: Long!, limit: Int!, page: Int!): [Token!]!
  myAddress: String!
}

type Subscription {
  """  both for createToken and insertToken"""
  likedComment(commentID: Int!, tokenId: Int!): Comment
  likedToken(tokenId: Int!): Token

  """  used only on updateTokenContent"""
  newComment(tokenId: Int!): Comment

  """  for each Token"""
  newToken: NewToken
  tokenUpdated(tokenId: Int!): Token
}

type Token {
  Block: Int!
  chainId: Long!
  createdAt: String!
  creationTransaction: String!
  flpAddress: String!
  makerAddress: String!
  offChainData: OffChainData!
  partyFactoryAddress: String!
  tokenAddress: String!
  tokenId: Int!
}

type User implements IUser {
  Discord: String
  Telegram: String
  X: String
  aboutMe: String
  address: String!
  avatarUrl: String
  userName: String!
}

type UserBalance {
  address: String!
  bigIntAmount: String!
}

input UserDataInput {
  Discord: String
  Telegram: String
  X: String
  aboutMe: String
  avatarUrl: String
  userName: String!
}

type UserWithFollowersAndFollowings implements IUser {
  Discord: String
  Telegram: String
  X: String
  aboutMe: String
  address: String!
  avatarUrl: String
  followers: [User!]!
  followings: [User!]!
  userName: String!
}